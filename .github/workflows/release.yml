name: Build and Release (Windows)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version override (optional)'
        required: false

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Extract version
        id: ver
        shell: pwsh
        run: |
          $override = '${{ github.event.inputs.version }}'
          if ($override) { echo "version=$override" >> $env:GITHUB_OUTPUT; exit 0 }
          $v = (Get-Content rolomemo.py | Select-String -Pattern 'APP_VERSION\s*=\s*"([^"]+?)"').Matches.Groups[1].Value
          if (-not $v) { $v = '${{ github.ref_name }}' }
          echo "version=$v" >> $env:GITHUB_OUTPUT

      - name: Build PyInstaller (onefile)
        shell: pwsh
        run: |
          pyinstaller --name RoloMemo --windowed --noconfirm --clean --onefile `
            --collect-submodules webview --collect-data webview `
            --add-data "rolomemo_component.js;." `
            --add-data "assets;assets" `
            rolomemo.py

      - name: Show dist
        run: dir dist

      - name: Setup Inno Setup
        run: choco install innosetup -y

      - name: Compile installer (.iss)
        shell: pwsh
        run: |
          $v = '${{ steps.ver.outputs.version }}'
          iscc /DMyAppVersion=$v installer\rolomemo.iss

      - name: Prepare signing certificate (optional)
        shell: pwsh
        env:
          WINDOWS_CERT_PFX_BASE64: ${{ secrets.WINDOWS_CERT_PFX_BASE64 }}
        run: |
          if (-not "$env:WINDOWS_CERT_PFX_BASE64") { Write-Host "No signing cert provided, skipping"; exit 0 }
          $pfx = "$PWD\codesign.pfx"
          [IO.File]::WriteAllBytes($pfx, [Convert]::FromBase64String($env:WINDOWS_CERT_PFX_BASE64))
          Write-Host "Wrote signing cert to $pfx"

      - name: Sign binaries (optional)
        shell: pwsh
        env:
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
        run: |
          if (-not (Test-Path "$PWD\codesign.pfx") -or -not "$env:WINDOWS_CERT_PASSWORD") { Write-Host "No signing material, skipping"; exit 0 }
          $pfx = "$PWD\codesign.pfx"
          $pwd = "$env:WINDOWS_CERT_PASSWORD"
          $exe = Get-ChildItem dist\RoloMemo.exe -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($exe) { signtool sign /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 /f $pfx /p $pwd $exe.FullName }
          $setup = Get-ChildItem dist\installer\*Setup*.exe -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($setup) { signtool sign /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 /f $pfx /p $pwd $setup.FullName }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            dist/RoloMemo.exe
            dist/installer/*.exe

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: RoloMemo ${{ steps.ver.outputs.version }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist/RoloMemo.exe
            dist/installer/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
